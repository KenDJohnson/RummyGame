import java.util.*;

public class Controller{
	
	/* This class allows for the players to interact with one another as well as with the pool*/ 
	
	protected static Player[] players; // Array of players to determine the players turn.
	
	protected static Pool pool; //Allows for controller to interact with the pool.
	
	protected static Deck deck; //Deck for the game.
	
	protected static LinkedList<Card> discardPile; //discard pile for the game.
	
	/*number of humans should always be one, and the number of *
	 * bots is determined by the player when they start.*/
	public Controller(int numOfHumans, int numOfBots){
		
		players = new Player[1 + numOfBots]; //array is set to the number of bots plus the human player
		
		deck = new Deck(false); //the deck is set to false because the deck is not empty. 
		
		deck = deck.shuffle(); //The deck gets shuffled here.
		
		players[0] = new HumanPlayer(); //puts a human player in array at position 0, allowing for human to play first.
		
		/* for loop adding the number of bots to the remaining positions*/
		for(int i = 1; i < players.length; i++){
			players[i] = new BotPlayer();
		}
		
		discardPile = new LinkedList<Card>(); //creating a discard pile that is a linked list of cards.
		
		pool = new Pool(); //new pool is created here
		
	}

	/* Method playCards allows for the player to try to play a hand.
	 * The array of cards is passed to pool to see if the move is valid or not. 
	 * If it is valid the score is returned.*/
	public static int playCards(Card[] cards){
		int score = pool.score(cards);
		if(score > 0){
			System.out.println("\nPool\n---------------------\n" + pool + "---------------------\n");
		}
		return score;
	}
	
	/* Method discard is called at the end of every players turn.
	 * Adds the card that the player chooses to the top of the discard pile*/
	public static void discard(Card card){
		
		discardPile.push(card); //adds discard to the top of the pile. 
		
	}
	
	/* This method allows for the controller to give a card to the player.
	 * This method checks to see if the player wants to draw from deck or discard*/
	public static ArrayList<Card> giveCard(String source, int numberOfCards){ 
		
		ArrayList<Card> n = new ArrayList<Card>(); 
	
		/*if the player states that they want to draw from the discard*/
		if(source.equals("discard")){
			
			/*check to see if the number the player wants to draw is valid.*/
			if(numberOfCards > discardPile.size()){
				
				//this is printed if it isn't valid.
				System.out.println("You can't draw that many cards.");
				
				//scanner made to prompt user.
				Scanner sc = new Scanner(System.in);
				
				//asks the player again. 
				System.out.println("Please enter a valid number of cards to draw.");
				
				//default valid response to check if the player input is valid.
				boolean validResponse = false;
				
				while(!validResponse) // another loop asking for input until it receives a valid response
				 {
	                 System.out.println("How many cards would you like to draw?");
	                 try
	                 {
	                 numberOfCards = sc.nextInt();
	                 }
	                 catch(InputMismatchException e) // this exception will be thrown if anything but an integer is input
	                 {
	                	 System.out.println("Please enter an integer number of cards.");
	                	 sc.nextLine(); // clears scanner for new input (important)
	                	 continue; // start next loop iteration
	                 }
	                 
	                 //response should now be valid
	                 validResponse = true;
	              }
			}
			
			/*loop to remove cards chosen from discard to array and passes to player hand.*/
			for(int i = 0; i < numberOfCards; i++){
				n.add(discardPile.pop());
			}
			
		}
		
		/*this loop is only for the start of the game. Deals starting hand to players.*/
		else if(source.equals("deck start")){
			int i = 0;
			while(i < 7){
				n.add(deck.pop());
				i++;
			}
		}
		
		/*removes one card from deck and adds to players hand.*/
		else if(source.equals("deck")){
			n.add(0,deck.pop());
		}
		return n;
	}

	@Override
	public String toString() {
		return Arrays.toString(players);
	}

	public static void main(String[] args){
		
		int NumberOfBots = 0; //how many bots
	
		System.out.println("---------------- Welcome To Rummy! -----------------");
		System.out.println("The objective of this game is to reach 500 points.\nThe first player to reach this objective wins.\n----------------------------------------------------\n");
		
		Scanner sc = new Scanner(System.in); //creating scanner for input from user
		
		boolean validResponse = false;
		
		 while(!validResponse) // another loop asking for input until it receives a valid response
		 {
             System.out.println("How many Bots would you like to play against? (1 - 6)");
            
	             try
	             {
	             NumberOfBots = sc.nextInt();
	             }
	             catch(InputMismatchException e) // this exception will be thrown if anything but an integer is input
	             {	
	            		 System.out.println("Invalid statement, please re-enter a number.");
	            		 sc.nextLine(); // clears scanner for new input (important)
	            		 continue; // start next loop iteration
	             }
	             if(NumberOfBots <= 6 && NumberOfBots > 0){
	            	 validResponse = true;
	             }
	             else{
	            	 System.out.println("Invalid number, please re-enter a number.");
	             }
             }
		 
		Controller play = new Controller(1, NumberOfBots); // Creating new Controller that takes in number of bots and one human
		
		Player human = new HumanPlayer(); //human player here.
	
		players[0] = human; //human player will always be at position 0
		
		discardPile.add(deck.pop()); //starting discard pile
	
		
		boolean KeepPlaying = true;
		int turn = 0;
		Player PlayerTurn = players[turn];
		
		//so long as this is true, the game will continue.
		while(KeepPlaying){
			
			/* This if statement checks to see if the deck is now empty.
			 * if it is empty, then the deck obtains cards from the discard pile.
			 * The deck is then shuffled again, and discard obtains a card from deck.*/
			if(deck.isEmpty()){
				for(int i = 0; i < discardPile.size(); i++){
					deck.push(discardPile.pop());
				}
				deck = deck.shuffle();
				discardPile.add(deck.pop());
			}
			
			/* This is if the player is not a human player.*/
			if(turn != 0){
				
				PlayerTurn.draw(); //bot draws.
				PlayerTurn.play(); //bot can play
				PlayerTurn.DiscardFromHand(); //bot discards from hand.
				
				System.out.println("\n");
				for(int i = 0; i < PlayerTurn.getHand().size(); i++){
					System.out.print("[\u25AE] "); //hides bot hand from human player 
				}
				System.out.println("Bot " + turn +" Score: " + players[turn].getScore());
			
			}
			
			/* This is if the player is a human player.*/
			else{
			System.out.println("\nScore: " + PlayerTurn.getScore() + "\nHand: " + PlayerTurn.getHand() + "\nDiscard Pile: " + discardPile + "\nPool\n---------------------\n" + pool + "---------------------\n");			
			
			PlayerTurn.draw(); //human draws.
			System.out.println(PlayerTurn.getHand() + "\tDiscard: " + discardPile + "\nPool: " + pool + "\n");
		
			PlayerTurn.play(); //human can play.
		
			PlayerTurn.DiscardFromHand(); //human discards.
			
			}
			
			//if player hand = 0 then KeepPlaying = false and the player just won.
			KeepPlaying = PlayerTurn.getHand().size() != 0;
			
			//keeps track of the turns.
			turn = (turn + 1) % players.length;
			
			//keeps track of the turns.
			PlayerTurn = players[turn];

		}
		
		/*loop to check for if a players score is >= 500. if it is, then the game is over and that player wins.*/
		for(int i = 0; i < players.length; i++){
			if(players[i].getScore() >= 500){
				KeepPlaying = false;
				System.out.println("Player " + i + " wins!");
			}
		}
	}
}

//* 11/18/2013 4:04(PM): working on testing out starting situations. Might make new method for choices player makes. 
// 						 feel free to test the game if you want. As you will notice after a deck or discard draw, 
//						 the player's hand gets replaced with what they drew. Need to fix that.
//
//* 11/19/2013 6:03(PM): Completed prototype for Human player and controller interaction. Minor fixes need to be made
//						 in human player. Currently allows the play of the same card multiple times. Found out that
//						 if you really wanted to, you could play by yourself and it works just fine.
// 
//* 11/20/2013 Incomplete: Need to make sure if pick up more than 1 card from discard, must play the last card picked up (or first card?)
//
//* 12/2/2013 1:51 (PM): Added complete set of comments for final submission. 
